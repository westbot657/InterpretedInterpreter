
@Lexer
#!literals
~
    / -> patterns/-/regex
    TILDE
!
    = NE
    NOT
@ AT
#
    ! BANG
    HASH
$ DOLLAR
%
    = MODULOEQ
    MODULO
^
    /
        = ROOTEQ
        ROOT
    = BITWISEXOREQ
    BITWISEXOR
&
    & AND
    BITWISEAND
*
    *
        = POWEQ
        POW
    = MULEQ
    MUL
( LPAREN
) RPAREN
-
    - DEC
    > RARROW
    = MINUSEQ
    MINUS
+
    = PLUSEQ
    + INC
    PLUS
=
    = EE
    EQ
{ LBRACKET
} RBRACKET
[ LBRACE
] RBRACE
|
    > FUNCDEF
    = APPROXEQ
    | OR
    BITWISEOR
\
    \ -> patterns/-/comment
    BACKSLASH
:
    = COLONEQ
    COLON
; SEMICOLON
" -> patterns/-/string
' -> patterns/-/string
<
    <
        < IMPORT
        LBITSHIFT
    = LTE
    - LARROW
    LT
, COMMA
. DOT
>
    >
        > CLASSDEF
        RBITSHIFT
    = GTE
    GT
/
    /
        = FLOOREQ
        FLOOR
    = DIVEQ
    DIV
?
    = QMARKEQ
    QMARK
#!patterns
comment:
    >> (\\.*)
    COMMENT
string:
    >> (f"...")
    >> (f'...')
    >> ("...")
    >> ('...')
    STRING
regex:
    >> (~/.../.../~)
    >> (~/.../~)
    >> (~/~)
    REGEX
number: #redirect-from:[0-9]
    >>> ([1-9][_0-9]*|0)
        >>> (x[0-9a-zA-Z_]+(\.[0-9]+)?)
            BASENUM
        >>> (\.[0-9]+)
            FLOAT
        INT
identifier: #redirect-from:[_a-zA-Z]
    >-> (if|elif|else|switch|case|while|for|in|is|throw|catch|and|or|not|true|false|null)
        >>> (and)
            AND #no-value
        >>> (or)
            OR #no-value
        >>> (not)
            NOT #no-value
        >>> (true|false)
            BOOLEAN
        >>> (null)
            NULL #no-value
        KEYWORD #regex-value
    >-> ([_a-zA-Z][_a-zA-Z0-9]*)
        >-> (f("|'))
            -> patterns/-/string
        ID

@Nodes
EmptyNode
NullNode
BinOpNode(left, op, right)
UnaryOpNode(op, value)
BodyNode(statements)
ReturnNode(value)
IntegerNode(value)
FloatNode(value)
BasenumNode(value)
BooleanNode(value)
ContinueNode
BreakNode

ImportNode(target, sub_import, module)
NameNode(values)
AliasNode(values)
ClassDefNode(mod, name, inheret, body)
FuncDefNode(mod, name, clamp, args, body)
VarAssignNode(mod, name, clamp, value)
VarAccessNode(name)
CallNode(name, args)
ModNode(mods)

@Parser
#!entry-point: statements

statements: BodyNode
    | <(SEMICOLON|NEWLINE)>* statements:[statement]*  #statements:EmptyNode
statement:
    ReturnNode | <KEYWORD:return> value:[expr]? <(SEMICOLON|NEWLINE)>*  #value:NullNode
    ContinueNode | <KEYWORD:continue> <(SEMICOLON|NEWLINE)>*
    BreakNode | <KEYWORD:break> <(SEMICOLON|NEWLINE)>*
    | [expr] <(SEMICOLON|NEWLINE)>*
expr:
    BinOpNode | left:[comp-expr] op:<(AND|OR)> right:[comp-expr]
    | [comp-expr]
comp-expr:
    UnaryOpNode | op:<NOT> value:[comp-expr]
    BinOpNode | left:[arith-expr] op:<(EE|LT|GT|LTE|GTE)> right:[arith-expr]
    | [arith-expr]
arith-expr:
    BinOpNode | left:[term] op:<(PLUS|MINUS)> right:[term]
    | [term]
term:
    BinOpNode | left:[factor] op:<(MUL|DIV|FLOOR|MODULO)> right:[factor]
    | [factor]
bitswap:
    BinOpNode | left:[power] op:<(QMARK|TILDE)> right:[power]
    | [power]
factor:
    UnaryOpNode | op:<(PLUS|MINUS)> value:[factor]
    | [bitswap]
power:
    BinOpNode | left:[call] op:<(POW|ROOT)> right:[factor]
    | [call]
call:
    CallNode | name:[atom] <LPAREN> args:[pass-args]* <RPAREN>  #args:EmptyNode
    | [atom]
atom:
    IntegerNode | value:<INT>
    FloatNode | value:<FLOAT>
    BasenumNode | value:<BASENUM>
    BooleanNode | value:<BOOLEAN>
    NullNode | <NULL>
    | [class-def]
    | [var-def]
    | [func-def]
    | [import-expr]
    | [var-access]

import-expr: ImportNode
    | <IMPORT> sub_import:[name] <IMPORT> module:[name]  #target:NullNode
    | <IMPORT> module:[name]  #sub_import:NullNode #target:NullNode
    | target:[names] <IMPORT> sub_import:<ID> <IMPORT> module:<ID>

mods: ModNode
    | mods:<DOLLAR> mods:<HASH> mods:<VLINE>
    | mods:<HASH> mods:<VLINE> mods:<DOLLAR>
    | mods:<VLINE> mods:<DOLLAR> mods:<HASH>
    | mods:<DOLLAR> mods:<VLINE> mods:<HASH>?
    | mods:<HASH> mods:<DOLLAR> mods:<VLINE>?
    | mods:<VLINE> mods:<HASH> mods:<DOLLAR>?
    | mods:<DOLLAR> mods:<HASH>?
    | mods:<HASH> mods:<VLINE>?
    | mods:<VLINE> mods:<DOLLAR>?
    
name: NameNode
    | values:<ID> (<DOT> values:<ID>)*

names: AliasNode
    | values:[name] (<BACKSLASH> values:[name])*

alias: AliasNode
    | values:<ID> (<BACKSLASH> values:<ID>)*
var-access: VarAccessNode
    | name:[name]
class-def: ClassDefNode
    | mod:[mods]? <CLASSDEF> name:[alias] (<LT> inheret:[names] <GT>)? <LBRACKET> body:[statements] <RBRACKET>  #inheret:EmptyNode #mod:EmptyNode
func-def: FuncDefNode
    | mod:[mods]? <FUNCDEF> name:[alias] (<LT> clamp:[names] <GT>)? <LPAREN> args:[args]* <RPAREN> <RARROW> <LBRACKET> body:[statements] <RBRACKET>  #clamp:EmptyNode #mod:EmptyNode
var-def: VarAssignNode
    | mod:[mods]? name:[alias] (<LT> clamp:[names] <GT>)? <EQ> value:[expr] <SEMICOLON>?  #clamp:EmptyNode #mod:EmptyNode
    | mod:[mods]? name:[alias] <SEMICOLON>  #clamp:EmptyNode #mod:EmptyNode #value:NullNode


@Code
15 + 16
