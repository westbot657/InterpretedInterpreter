
@Lexer
#!literals
~
    / -> patterns/-/regex
    TILDE
!
    = NE
    NOT
@ AT
#
    ! BANG
    HASH
$ DOLLAR
%
    = MODULOEQ
    MODULO
^
    /
        = ROOTEQ
        ROOT
    = BITWISEXOREQ
    BITWISEXOR
&
    & AND
    BITWISEAND
*
    *
        = POWEQ
        POW
    = MULEQ
    MUL
( LPAREN
) RPAREN
-
    - DEC
    > RARROW
    = MINUSEQ
    MINUS
+
    = PLUSEQ
    + INC
    PLUS
=
    = EE
    EQ
{ LBRACKET
} RBRACKET
[ LBRACE
] RBRACE
|
    > FUNCDEF
    = APPROXEQ
    | OR
    BITWISEOR
\
    \ -> patterns/-/comment
    BACKSLASH
:
    = COLONEQ
    COLON
; SEMICOLON
" -> patterns/-/string
' -> patterns/-/string
<
    <
        < IMPORT
        LBITSHIFT
    = LTE
    - LARROW
    LT
, COMMA
. DOT
>
    >
        > CLASSDEF
        RBITSHIFT
    = GTE
    GT
/
    /
        = FLOOREQ
        FLOOR
    = DIVEQ
    DIV
?
    = QMARKEQ
    QMARK
#!patterns
comment:
    >> (\\.*)
    COMMENT
string:
    >> (f"...")
    >> (f'...')
    >> ("...")
    >> ('...')
    STRING
regex:
    >> (~/.../.../~)
    >> (~/.../~)
    >> (~/~)
    REGEX
number: #redirect-from:[0-9]
    >>> ([1-9][_0-9]*|0)
        >>> (x[0-9a-zA-Z_]+(\.[0-9]+)?)
            BASENUM
        >>> (\.[0-9]+)
            FLOAT
        INT
identifier: #redirect-from:[_a-zA-Z]
    >-> (if|elif|else|switch|case|while|for|in|is|throw|catch|and|or|not|true|false|null)
        >>> (and)
            AND #no-value
        >>> (or)
            OR #no-value
        >>> (not)
            NOT #no-value
        >>> (true|false)
            BOOLEAN
        >>> (null)
            NULL #no-value
        KEYWORD #regex-value
    >-> ([_a-zA-Z][_a-zA-Z0-9]*)
        >-> (f("|'))
            -> patterns/-/string
        ID

@Nodes
EmptyNode
NullNode
BinOpNode(left, op, right)
UnaryOpNode(op, value)

@Parser
statements:
    BodyNode | statements:[statement]*
statement:
    | 
expr:
    BinOpNode | left:[comp-expr] op:<(AND|OR)> right:[comp-expr]
    | [comp-expr]
comp-expr:
    UnaryOpNode | op:<NOT> value:[comp-expr]
    BinOpNode | left:[arith-expr] op:<(EE|LT|GT|LTE|GTE)> right:[arith-expr]
    | [arith-expr]
arith-expr:
    BinOpNode | left:[term] op:<(PLUS|MINUS)> right:[term]
    | [term]
term:
    BinOpNode | left:[factor] op:<(MUL|DIV|FLOOR|MODULO)> right:[factor]
    | [factor]
bitswap:
    | [power] <(QMARK|TILDE)> [power]
    | [power]
factor:
    UnaryOpNode | op:<(PLUS|MINUS)> value:[factor]
    | [bitswap]
power:
    BinOpNode | left:[call] op:<(POW|ROOT)> right:[factor]
    | [call]
call:
    | [atom] <LPAREN> [pass-args]* <RPAREN>
    | [atom]
atom:
    | <INT>
    | <FLOAT>
    | <BASENUM>
    | <BOOLEAN>
    | <>

#!entry-point:statements


@Code
15 + 16
